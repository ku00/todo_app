

##Rubyについて
###Rubyを使って画面に文字を出力する
 
```
  1.テキストエディタを開いて
　　　puts "こんにちは！"
　　と書いて、「hello.rb」という名前をつけて保存。
　2.ターミナルを開き、
　　　ruby hello.rb
　　というコマンドを入力。
　3.こんにちは！
```

###puts、コマンドとは

```
　*putsは指定した文字列を出力してくれる言葉。
　*さっき入力したコマンドは
　　　ruby hello.rb
　　　＝「Rubyを使ってhello.rbファイルを読み込め」とパソコンに命令している。
```

##変数と計算
###変数を使う

```
　 *変数とは…数字や文字など、何でも入れる箱のようなもの。
　　　x = 2015
　　　puts x
　　と書くと、2015を表示してくれる。

　※ここでのイコール記号は等号ではなく、xに2015代入している演算子なので注意。
```

###計算してみよう

```
　*puts 2+3 と書けば5が出力される。

　*変数の中身が数字のときは計算もできる。
　　半径10の円の面積を求めたい時は
　　　r = 10
　　　puts r * r * 3.14
　　変数rの中身を変えても計算できる。
```

##構造化定理
###構造化プログラミング

```
  *すべてのプログラミングは
　　*逐次（順接、順次）
　　*条件分岐
　　*反復
　　の３つから成り立っているとする考え。
```

###逐次処理

```
　*プログラムを上から順に処理していくルール。
　　　puts "い"
　　　puts"ろ"
　　　puts"は"
　　という３行のプログラムがあれば、
　　　い→ろ→は
　　の順で出力される。
```

###条件分岐１

```
 *ある条件を満たした時に処理を行う。
　*「if」という条件分岐のプログラム例。
　　　x = 3
　　　if x < 5
　　　　puts "xは５未満です"
　　　end
　　if以下に条件文（x < 5）を書く。
　　xが５未満の時だけif-ebd間が実行される。
　　xを１０等に変えるを何も出力されない。
```

###条件分岐２

``` 
   *ifとセットで覚える「else」。
　　　x = 7
　　　if x < 5 
　　　　puts "xは５未満です"
　　　else
　　　　puts "xは５以上です"
　　　end
　　今回はxに７を代入してelseを書いている。
　　elseはifの条件に当てはまらない時に、代わりに実行される文。
```

###条件分岐３

```
「elsif」。 
　Else ifの略。 
　　　x = 7  
　　　if x < 5  
　　　　puts "スルー" 
　　　elsif x < 10 
　　　　puts "ここが実行される！"  
　　　else  
　　　　puts "スルー"  
　　　end  
　　if条件の「xは５未満」に当てはまらないので、次にelsifが実行される。xは７であり、elsif条件の「１０未満」に当てはまるため、真ん中のputsが実行される。
```

###条件分岐４

```
*３つは一番基本的なIf文。  
*他にもUnlessやCaseといった条件分岐もあるので上手に使い分けたい。
```

##構造化定理の反復処理
###反復処理１

```
*繰り返しの処理。  
*提示した条件の達するまで範囲内の処理を続ける。  
*Timesは指定した数だけ繰り返す。  
　　3.times {  
　　　print ‘はんぷく’  
　　}  
　実行結果  
　→はんぷくはんぷくはんぷく
```

###反復処理２

```
*条件に達するまで永遠ループするWhile文。　
　　x = 0　
      while x < 5 do　
　　　puts ‘あ’　
　　　x = x + 1　
　　end　
　xが５未満のときwhile-end内を実行し続ける。　
　内部でxに１を足しているおで「あ」は５回表示される。　
　足す処理を入れないと無限ループするぼで注意。
```

###反復処理３

```
*For文。While文と並んで代表的な反復文法。　
　　for number in 1..3 do　
　　　puts number　
　　end　
*forの後に指定してた変数numを１から３までの範囲で代入して実行する。 
　実行すると、１→２→３の順で出力される。
```
